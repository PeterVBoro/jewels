{"version":3,"sources":["js/Jewel.js","js/Board.js","js/App.js","index.js"],"names":["Jewel","props","react_default","a","createElement","className","id","index","style","color","onClick","onclick","Board","_this","Object","classCallCheck","this","colors","possibleConstructorReturn","getPrototypeOf","call","generateNewJewels","bind","assertThisInitialized","getRandomColor","generateBoard","handleClicked","state","board","inGame","clicked","document","querySelector","me","getElementById","r1","Math","floor","length","c1","r2","parseInt","c2","isNext","newBoard","switchJewels","updateBoard","classList","add","remove","_this2","i","j","obj","countJewels","leftRight","upDown","_ret","jewels","setState","that","getJewelElem","then","fadeOut","addJewels","updateScore","nJewels","v","Promise","resolve","elements","String","row","col","jewel","children","push","forEach","e","opacity","last","Date","tick","date","window","requestAnimationFrame","setTimeout","nextObj","_this3","newJewels","resetOpacity","len","every","val","_","arr","top","bot","above","count","d","yStep","xStep","copy","tmp","o","output","key","Array","isArray","random","dup","left","up","generateNextColor","iconColor","js_Jewel","createHTMLBoard","React","Component","Header","Timer","time","PlayBtn","btnText","handleClick","Score","score","ones","tens","min","hunds","thouds","tenThouds","App","btn","startTimer","endTimer","clearInterval","t","setInterval","js_Board","ReactDOM","render","js_App"],"mappings":"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","file":"static/js/main.f7f3a149.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Jewel.css';\r\n\r\nfunction Jewel(props) {\r\n  return (\r\n    <div className=\"jewel-container\" id={props.index}>\r\n      <i style={props.color} className=\"fas fa-gem\" onClick = {() => props.onclick(props.index)}></i>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jewel;","import React from 'react';\r\nimport Jewel from './Jewel';\r\nimport '../css/animate.css';\r\nimport '../css/Board.css';\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const colors = [\r\n      \"rgb(0,0,225)\",\"rgb(0,255,0)\",\"rgb(255,0,0)\",\r\n      \"rgb(0,255,225)\", \"rgb(255,0,225)\", \"rgb(255,255,0)\"\r\n    ];\r\n    this.generateNewJewels = this.generateNewJewels.bind(this);\r\n    this.getRandomColor = this.getRandomColor.bind(this);\r\n    this.generateBoard = this.generateBoard.bind(this);\r\n    this.handleClicked = this.handleClicked.bind(this);\r\n    this.state = {\r\n      colors: colors,\r\n      board: this.generateBoard(colors),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * handler to deal with clicks on the jewels\r\n   * @param {Numer} id the css id for the clicked-on jewel-container div\r\n   */\r\n  handleClicked(id) {\r\n    if(!this.props.inGame) { return; } // return if game is not in play\r\n    const clicked = document.querySelector(\".clicked\"); // search for other jewel clicked\r\n    const me = document.getElementById(id);\r\n    // if another jewel has been clicked\r\n    if(clicked) {\r\n\r\n      // convert index into row,column\r\n      let r1 = Math.floor(id/this.state.board.length);\r\n      let c1 = id-(r1*this.state.board.length);\r\n      let r2 = Math.floor(parseInt(clicked.id)/this.state.board.length);\r\n      let c2 = parseInt(clicked.id)-(r2*this.state.board.length);\r\n\r\n      // check if next to one another\r\n      if(this.isNext(r1,c1,r2,c2)) {\r\n        // switch the jewels and update game board\r\n        let newBoard = this.switchJewels(r1,c1,r2,c2);\r\n        this.updateBoard(newBoard);\r\n      } else {\r\n        me.classList.add(\"clicked\");\r\n      }\r\n      clicked.classList.remove(\"clicked\");\r\n    } else {\r\n      me.classList.add(\"clicked\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * updates the board after a move\r\n   * @param {String[][]} board the game board\r\n   */\r\n  updateBoard(board) {\r\n    // for every jewel\r\n    for(let i = 0; i < board.length; i++) {\r\n      for(let j = 0; j < board[i].length; j++) {\r\n        let obj = this.countJewels(board, i, j);\r\n\r\n        // found 3 or more jewels in a row\r\n        if(obj.leftRight.length >= 3 || obj.upDown.length >= 3) {\r\n          let jewels = null;\r\n          // choose the direction with the most jewels\r\n          jewels = obj.leftRight.length > obj.upDown.length ? obj.leftRight : obj.upDown;\r\n\r\n          // update the board\r\n          this.setState({colors: this.state.colors, board: board}, () =>{\r\n            let that = this; // for the last step, need to save 'this'\r\n            this.getJewelElem(jewels, board)\r\n              .then(this.fadeOut)\r\n              .then(this.generateNewJewels)\r\n              .then(this.addJewels)\r\n              .then(function(obj) {\r\n                that.props.updateScore(obj.nJewels);\r\n                that.setState({colors: that.state.colors, board: obj.newBoard});\r\n                that.updateBoard(that.state.board); // continue searching for more\r\n              });\r\n          });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * First step into updating the game board, gets the respective jewel\r\n   * html elements. Resolves an object of form => {elements:[], board: , jewels: }\r\n   * @param {Object[{row: Number, col: Number}]} jewels an array of object containing the indices of which jewels need to be removed\r\n   * @param {String[][]} board the game board right after player makes a move\r\n   */\r\n  getJewelElem(jewels, board) {\r\n    return new Promise((resolve) => {\r\n      let obj = {elements: [], board: board, jewels: jewels};\r\n      for(let i = 0; i < jewels.length; i++) {\r\n        const id = String(jewels[i].row*board.length+jewels[i].col);\r\n        const jewel = document.getElementById(id).children[0];\r\n        obj.elements.push(jewel);\r\n      }\r\n      resolve(obj);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * source: http://youmightnotneedjquery.com/\r\n   * Second step into updating the game board. Is passed an object of the form =>\r\n   * {elements:[], board: , jewels: }. Will extract the elements array from the object \r\n   * and cause each html element to fade out. Resolves the same object except with out \r\n   * the elements array.\r\n   * @param { Object {\r\n   *  elements: HTMLElement[], \r\n   *  board: String[][], \r\n   *  jewels: Object[{row: Number, col: Number}] \r\n   *  }} obj The Passed object from the previous step \r\n   */\r\n  fadeOut(obj) {\r\n    return new Promise((resolve) => {\r\n      let elements = obj.elements;\r\n      elements.forEach(function(e) {\r\n        e.style.opacity = 1;\r\n      });\r\n  \r\n      var last = +new Date();\r\n      var tick = function() {\r\n        let date = +new Date();\r\n        elements.forEach(function(e) {\r\n          e.style.opacity = +e.style.opacity - (date - last) / 150;\r\n        })\r\n        last = +new Date();\r\n  \r\n        if (+elements[0].style.opacity > 0) {\r\n          (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);\r\n        } else if(+elements[0].style.opacity <= 0) {\r\n          let nextObj = {board: obj.board, jewels: obj.jewels};\r\n          resolve(nextObj);\r\n        }\r\n      };\r\n  \r\n      tick();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The third step in updating the game board. Passed the object resolved from step two\r\n   * and will generate new Jewel colors. These colors will be placed in an array and \r\n   * added to the object to be passed onto the next step.\r\n   * @param { Object {\r\n   *  board: String[][], \r\n   *  jewels: Object[{row: Number, col: Number}],\r\n   *  newJewels: String[]\r\n   *  }} obj The Passed object from the previous step \r\n   */\r\n  generateNewJewels(obj) {\r\n    return new Promise((resolve) => {\r\n      let newJewels = [];\r\n      for(let i = 0; i < obj.jewels.length; i++) {\r\n        newJewels.push(this.getRandomColor(this.state.colors));\r\n      }\r\n      obj.newJewels = newJewels;\r\n      resolve(obj);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The fourth step in updating the game board. Passed the object the previous step\r\n   * resolved and will add the newly created jewels to the board. Resolves and object\r\n   * containing the new game board and the number of jewels destroyed.\r\n   * @param { Object {\r\n   *  board: String[][], \r\n   *  jewels: Object[{row: Number, col: Number}],\r\n   *  newJewels: String[]\r\n   *  }} obj The Passed object from the previous step  \r\n   */\r\n  addJewels(obj) {\r\n    return new Promise((resolve) => {\r\n      let newBoard = obj.board;\r\n      let newJewels = obj.newJewels;\r\n      let jewels = obj.jewels;\r\n\r\n      function resetOpacity(row, col, len) {\r\n        const id = String(row*len+col);\r\n        const jewel = document.getElementById(id).children[0];\r\n        jewel.style.opacity = 1;\r\n      }\r\n\r\n      // jewels are aligned vertically \r\n      if(jewels.every( (val, _, arr) => val.col === arr[0].col)){\r\n        const col = jewels[0].col;\r\n\r\n        // change the colors of the bottom jewels to be the ones above them\r\n        for(let top = jewels[0].row-1, bot = jewels[jewels.length-1].row; top >= 0; top--, bot--) {\r\n          newBoard[bot][col] = obj.board[top][col];\r\n          resetOpacity(bot, col, obj.board.length);\r\n        }\r\n\r\n        // change the colors of the top jewels\r\n        for(let i = 0; i < newJewels.length; i++) {\r\n          newBoard[i][col] = newJewels[i];\r\n          resetOpacity(i, col, obj.board.length);\r\n        }\r\n      } else { // jewels aligned horizontally \r\n        const row = jewels[0].row;\r\n\r\n        // for every jewel part of the chain in the row\r\n        for(let i = jewels[0].col; i <= jewels[jewels.length-1].col; i++) {\r\n          // scoot the jewels above it down \r\n          for(let above = row; above > 0; above--) {\r\n            newBoard[above][i] = obj.board[above-1][i];\r\n          }\r\n          resetOpacity(row, i, obj.board.length);\r\n        }\r\n        // change the colors of the top jewels\r\n        for(let i = jewels[0].col, count = 0; i <= jewels[jewels.length-1].col; i++, count++) {\r\n          newBoard[0][i] = newJewels[count];\r\n          resetOpacity(row, i, obj.board.length);\r\n        }\r\n      }\r\n      resolve({newBoard: newBoard, nJewels: newJewels.length});\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Count the number of jewels in a row up/down and left/right from the jewel at (row,col).\r\n   * @param {String[][]} board the game board\r\n   * @param {Number} row which row to look from\r\n   * @param {Number} col which column to look from\r\n   * @returns an object with format => {upDown:[], leftRight:[]}, where the arrays will contain the indices of the jewels which are of the same color \r\n   */\r\n  countJewels(board, row, col) {\r\n    const obj = {upDown:[{row: row, col: col}], leftRight:[{row: row, col: col}]};\r\n    for(let d = -1; d <= 1; d += 2) {\r\n      // bounds check\r\n      if(\r\n        row+d < 0 || row+d > board.length ||\r\n        col+d < 0 || col+d > board.length\r\n      ) { continue; }\r\n      \r\n      // check up/down\r\n      let yStep = 1;\r\n      if(row+(d*yStep) >= 0 && row+(d*yStep) < board.length) {\r\n        while(board[row][col] === board[row+(d*yStep)][col]) {\r\n          obj.upDown.push({row: row+(d*yStep), col: col});\r\n          yStep++;\r\n          if(row+(d*yStep) < 0 || row+(d*yStep) >= board.length) {\r\n            break;\r\n          }\r\n        }\r\n    }\r\n\r\n      // check left/right\r\n      let xStep = 1;\r\n      if(col+(d*xStep) >= 0 && col+(d*xStep) < board[row].length) {\r\n        while(board[row][col] === board[row][col+(d*xStep)]) {\r\n          obj.leftRight.push({row: row, col: col+(d*xStep)});\r\n          xStep++;\r\n          if(col+(d*xStep) < 0 || col+(d*xStep) > board[row].length) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return obj\r\n  }\r\n\r\n /**\r\n  * Determines if jewel at (r1,c1) is next to jewel at (r2,c2)\r\n  * @param {Number} r1 row position for first jewel \r\n  * @param {Number} c1 column position for first jewel\r\n  * @param {Number} r2 row position for second jewel\r\n  * @param {Number} c2 column position for second jewel\r\n  * @returns {boolean} true if jewels next to each other, false otherwise\r\n  */\r\n  isNext(r1,c1,r2,c2) {\r\n    if(r1 === r2 && (c1+1 === c2 || c1-1 === c2)) {\r\n      return true;\r\n    } else if(c1 === c2 && (r1+1 === r2 || r1-1 === r2)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Switches jewel at (r1,c1) with jewel at (r2,c2)\r\n  * @param {Number} r1 row position for first jewel \r\n  * @param {Number} c1 column position for first jewel\r\n  * @param {Number} r2 row position for second jewel\r\n  * @param {Number} c2 column position for second jewel\r\n  * @returns {String[][]} a new game board with the jewels switched\r\n  */\r\n  switchJewels(r1,c1,r2,c2) {\r\n    let newBoard = this.copy(this.state.board);\r\n    let tmp = newBoard[r1][c1];\r\n    newBoard[r1][c1] = newBoard[r2][c2];\r\n    newBoard[r2][c2] = tmp;\r\n    return newBoard;\r\n  }\r\n\r\n  /**\r\n   * source: https://www.codementor.io/avijitgupta/deep-copying-in-js-7x6q8vh5d\r\n   * performs a deep copy of the passed object or array\r\n   * @param {Object} o object which will be deep copied\r\n   * @returns {Object} a deep copy of the object\r\n   */\r\n  copy(o) {\r\n    let output, v, key;\r\n    output = Array.isArray(o) ? [] : {};\r\n    for(key in o) {\r\n      v = o[key];\r\n      output[key] = (typeof v === \"object\") ? this.copy(v) : v;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Picks a random color\r\n   * @param {String[]} colors the available colors to choose from\r\n   * @returns {String} The rgb value for a random color in the form rgb(...)\r\n   */\r\n  getRandomColor(colors) {\r\n    const index = Math.floor(Math.random() * colors.length);\r\n    return colors[index];\r\n  }\r\n\r\n  /**\r\n   * Generates the next color for the jewel at (row,col).\r\n   * This function ensures the color picked will not be\r\n   * one to make three in a row. This should only be called\r\n   * when the board is first loaded or when a new game is requested.\r\n   * @param {String[][]} board game board\r\n   * @param {String[]} colors available colors\r\n   * @param {Number} row row position for jewel in question\r\n   * @param {Number} col column position for jewel in question\r\n   */\r\n  generateNextColor(board, colors, row, col) {\r\n    let color = this.getRandomColor(colors);\r\n    let dup = { left: true, up: true };\r\n\r\n    for(let i = -1; i >= -2; i--) {\r\n      // check left\r\n      if(col+i < 0) { \r\n        dup.left = false;\r\n      } else if(color !== board[row][col+i]) {\r\n        dup.left = false;\r\n      }\r\n\r\n      // check up\r\n      if(row+i < 0) {\r\n        dup.up = false;\r\n      } else if(color !== board[row+i][col]) {\r\n        dup.up =  false;\r\n      }\r\n    }\r\n\r\n    // generate new random color so no longer 3 in a row\r\n    if((dup.left && dup.up) || dup.up ) {\r\n      while(color === board[row-1][col]) {\r\n        color = this.getRandomColor(colors);\r\n      }\r\n    } else if(dup.left) {\r\n      while(color === board[row][col-1]) {\r\n        color = this.getRandomColor(colors);\r\n      }\r\n    }\r\n\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * Generates a game board when page first loaded or new game started.\r\n   * @param {String[]} colors available colors to pick for jewels\r\n   * @returns {String[][]} The game board and each jewels associated color\r\n   */\r\n  generateBoard(colors) {\r\n    let board = new Array(9);\r\n    for(let row = 0; row < board.length; row++) {\r\n      board[row] = new Array(9);\r\n      for(let col = 0; col < board[row].length; col++) {\r\n        board[row][col] = this.generateNextColor(board, colors, row, col);\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  /**\r\n   * @returns An html element of the board for react to render\r\n   */\r\n  createHTMLBoard() {\r\n    let board = [];\r\n\r\n    // Outer loop to create parent\r\n    for(let i = 0; i < 9; i++) {\r\n      let children = []\r\n      // Inner loop to create children\r\n      for(let j = 0; j < 9; j++) {\r\n        const iconColor = { color: this.state.board[i][j] }; // set the color of the jewel\r\n        children.push(<Jewel index={(i*9)+j} color={iconColor} onclick={this.handleClicked}/>)\r\n      }\r\n      // Create the parent and add the children\r\n      board.push(<div className=\"row\">{children}</div>);\r\n    }\r\n\r\n    return board;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"board-container\">\r\n        <div id=\"board\">\r\n          {this.createHTMLBoard()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board","import React from 'react';\nimport '../css/App.css';\nimport Board from '../js/Board';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateScore = this.updateScore.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = { \n      score: 0,\n      time: 100, \n      btnText: \"Play\", \n      inGame: false\n    };\n  }\n\n  handleClick() {\n    const btn = document.querySelector(\"button\");\n    btn.classList.remove(\"fade-in\");\n    btn.classList.add(\"fade-out\");\n    this.setState({\n      score: 0,\n      time: 100, \n      btnText: this.state.btnText, \n      inGame: true\n    }, this.startTimer());\n  }\n\n  updateScore(nJewels) {\n    this.setState({\n      score: this.state.score + nJewels * 20,\n      time: this.state.time,\n      btnText: this.state.btnText, \n      inGame: this.state.inGame\n    });\n  }\n\n  startTimer() {\n    const that = this;\n    let tick = function() {\n      let time = that.state.time;\n      if(time === 0) {\n        that.setState({\n          score: that.state.score, \n          time: 0, \n          btnText: \"Play Again?\", \n          inGame: false\n        }, endTimer());\n      } else {\n        time = (time % 100) ? time - 1 : time - 41;\n        that.setState({\n          score: that.state.score,\n          time: time, \n          btnText: \"Play Again?\",\n          inGame: true\n        });\n      }\n    }\n\n    let endTimer = function() {\n      const btn = document.querySelector(\"button\");\n      btn.classList.remove(\"fade-out\");\n      btn.classList.add(\"fade-in\");\n      clearInterval(t);\n    }\n\n    let t = setInterval(tick, 1000);\n  }\n  \n  render() {\n    return (\n      <main>\n        <Header time={this.state.time} \n                btnText={this.state.btnText} \n                handleClick={this.handleClick}\n                score={this.state.score}/>\n        <Board inGame={this.state.inGame}\n               updateScore={this.updateScore}/>\n      </main>\n    );\n  }\n}\n\n\nfunction Header(props) {\n  return (\n    <header>\n      <Timer time={props.time}/>\n      <PlayBtn btnText={props.btnText} handleClick={props.handleClick}/>\n      <Score score={props.score}/>\n    </header>\n  );\n}\n\nfunction Timer(props) {\n  const ones = props.time % 10;\n  const tens = Math.floor(props.time / 10 % 10);\n  const min = Math.floor(props.time / 100);\n\n  return (\n    <div id=\"timer-container\">\n      <p>Time left: \n        <span id=\"timer-min\"> {min}</span>:\n        <span id=\"timer-sec-tens\">{tens}</span>\n        <span id=\"timer-sec-ones\">{ones}</span>\n      </p>\n    </div>\n  );\n}\n\nfunction PlayBtn(props) {\n  return (\n    <div id=\"play-btn-container\">\n      <button onClick={() => props.handleClick()}>{props.btnText}</button>\n    </div>\n  )\n}\n\nfunction Score(props) {\n  const ones = props.score % 10;\n  const tens = Math.floor(props.score / 10 % 10);\n  const hunds = Math.floor(props.score / 100 % 10);\n  const thouds = Math.floor(props.score / 1000 % 10);\n  const tenThouds = Math.floor(props.score / 10000 % 10);\n  return (\n    <div id=\"score-container\">\n      <p id=\"score\">\n        Score: \n        <span> {tenThouds}</span>\n        <span>{thouds}</span>\n        <span>{hunds}</span>\n        <span>{tens}</span>\n        <span>{ones}</span>  \n      </p>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './js/App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}